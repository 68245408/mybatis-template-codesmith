<%-- 
Name: Mapper Interface
Author: Setsuna Jin
Description: Generate Mapper Interface File
--%>
<%@ Template Language="C#" TargetLanguage="Java" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context"  Description="Table that the stored procedures should be based on." %>

<%@ Property Name="SpringCacheEnable" Type="Boolean" Category="Context" Description="Is mapper use spring cache annotation" Default="true" Optional="True" %>
<%@ Property Name="POName" Type="String" Category="Context" Description="Persistent object class name" Optional="False" %>
<%@ Property Name="POPackage" Type="String" Category="Context" Description="Persistent object class package" Optional="False" %>
<%@ Property Name="MapperName" Type="String" Category="Context" Description="Mapper interface name" Optional="False" %>
<%@ Property Name="MapperPackage" Type="String" Category="Context" Description="Mapper interface package" Optional="False" %>
<%@ Property Name="AuthorName" Type="String" Category="Context" Description="The Author Name" Default="Setsuna Jin" Optional="False" %>

package <%= MapperPackage %>;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;

import <%= POPackage %>.<%= POName %>;
import <%= (POPackage+".").Replace(".po.",".qo.") %><%= POName %>QueryCondition;
import org.apache.ibatis.annotations.Mapper;

/**
 * <%= POName %> Mapper Interface : <%= SourceTable.Database + " : " + SourceTable.FullName %>
 * @author <%= AuthorName %> Generate By CodeSmith 7.0 At <%= DateTime.Now.ToLocalTime().ToString() %>
 * @see <%= POPackage %>.<%= POName %>
 */
@Mapper 
public interface <%= MapperName %> extends BaseMapper<<%= POName %>, <%= POName %>QueryCondition> {
    
    
    
    
    
    
    
    
    // --------------------------------------------------------------------------------------------
    
    /**
     * 按主键查询数据
     * @param  id entity Id
     * @return 实体 对象
     */
    @Override
    <%= SpringCacheEnable ? "" : "// " %>@Cacheable(value = "<%= LowFirst(POName) %>Mapper", key = "'<%= LowFirst(POName) %>:'+#id", unless = "#result == null")
    <%= POName %> selectByPK(String id);
    
    /**
     * 更新数据（全部）
     * @param  entity 实体
     * @return 操作影响行数
     */
    @Override
    <%= SpringCacheEnable ? "" : "// " %>@CachePut(value = "<%= LowFirst(POName) %>Mapper", key = "'<%= LowFirst(POName) %>:'+#entity.id", unless = "#entity.id == null")
    int updateByPK(<%= POName %> entity);

    /**
     * 更新数据（选择）
     * @param  entity 实体
     * @return 操作影响行数
     */
    @Override
    <%= SpringCacheEnable ? "" : "// " %>@CachePut(value = "<%= LowFirst(POName) %>Mapper", key = "'<%= LowFirst(POName) %>:'+#entity.id", unless = "#entity.id == null")
    int updateByPKSelective(<%= POName %> entity);

    /**
     * 标记数据可用
     * @param id 主键
     * @return 操作影响行数
     */
    @Override
    <%= SpringCacheEnable ? "" : "// " %>@CacheEvict(value = "<%= LowFirst(POName) %>Mapper", key = "'<%= LowFirst(POName) %>:'+#id")
    int enable(String id);

    /**
     * 标记数据不可用
     * @param id 主键
     * @return 操作影响行数
     */
    @Override
    <%= SpringCacheEnable ? "" : "// " %>@CacheEvict(value = "<%= LowFirst(POName) %>Mapper", key = "'<%= LowFirst(POName) %>:'+#id")
    int disable(String id);

    /**
     * 根据主键删除
     * @param  id entityId
     * @return 操作影响行数
     */
    @Override
    <%= SpringCacheEnable ? "" : "// " %>@CacheEvict(value = "<%= LowFirst(POName) %>Mapper", key = "'<%= LowFirst(POName) %>:'+#id")
    int deleteByPK(String id);

    /**
     * 删除全部数据
     * @return 操作影响行数
     */
    @Override
    <%= SpringCacheEnable ? "" : "// " %>@CacheEvict(value = "<%= LowFirst(POName) %>Mapper", allEntries = true)
    int deleteAll();
    
    // --------------------------------------------------------------------------------------------
}

<script runat="template">
    // 字段首字母小写
    public string LowFirst(string column){
        char c = column.Substring(0,1).ToCharArray()[0];
        int num = Convert.ToInt32(c);
        if(num >= 65 && num <= 90) {
          c = (char)(num + 32);
          return c.ToString() + column.Substring(1);
        }
        else 
          return column;
    }
    
    public string ServiceName(string poPackage){
        return poPackage.Substring(poPackage.LastIndexOf("."));
    }
</script>